from flask import Flask, request, jsonify
from pymongo import MongoClient
import uuid

app = Flask(__name__)

# Connect to MongoDB Atlas
client = MongoClient("mongodb+srv://scprac:scprac123@hackpsu.aqzjk1j.mongodb.net/?retryWrites=true&w=majority&appName=HACKPSU")
db = client["travel_app"]

# Use specified collection names
profile_collection = db["Profile"]
output_collection = db["Output"]

# Generate a unique ID
def generate_unique_id():
    return str(uuid.uuid4())

# ---------------- Profile Management ----------------

# Route to add a profile
@app.route('/add_profile', methods=['POST'])
def add_profile():
    data = request.json

    if "name" not in data:
        return jsonify({"error": "Missing name field"}), 400

    profile_id = generate_unique_id()  # Generate unique profile ID

    profile_data = {
        "_id": profile_id,
        "name": data["name"]
    }

    profile_collection.insert_one(profile_data)

    return jsonify({"message": "Profile saved successfully", "profile_id": profile_id})

# Route to get all profiles
@app.route('/get_profiles', methods=['GET'])
def get_profiles():
    profiles = list(profile_collection.find({}, {"_id": 1, "name": 1}))
    return jsonify(profiles)

# ---------------- Travel Cluster Management ----------------

# Route to add a cluster
@app.route('/add_cluster', methods=['POST'])
def add_cluster():
    data = request.json

    required_fields = ["Cluster ID", "Cluster Name", "Cluster Description", 
                       "Estimated Travel Distance (km)", "Estimated Travel Time (min)", 
                       "Total Estimated Time (min)", "Routes"]
    
    if not all(field in data for field in required_fields):
        return jsonify({"error": "Missing required fields"}), 400

    cluster_id = generate_unique_id()  # Assign unique ID

    cluster_data = {
        "_id": cluster_id,
        "cluster_id": data["Cluster ID"],
        "cluster_name": data["Cluster Name"],
        "cluster_description": data["Cluster Description"],
        "estimated_travel_distance_km": data["Estimated Travel Distance (km)"],
        "estimated_travel_time_min": data["Estimated Travel Time (min)"],
        "total_estimated_time_min": data["Total Estimated Time (min)"],
        "routes": data["Routes"]
    }

    output_collection.insert_one(cluster_data)

    return jsonify({"message": "Cluster saved successfully", "cluster_id": cluster_id})

# Route to get all clusters
@app.route('/get_clusters', methods=['GET'])
def get_clusters():
    clusters = list(output_collection.find({}, {"_id": 1, "cluster_name": 1, "routes": 1}))
    return jsonify(clusters)

# Run the Flask app
if __name__ == '__main__':
    app.run(debug=True)



